- name: Get listener_id
  include: lookupv2.yml
  when:
    - pool_name is defined

- name: Send request to API (list ECS for lookup)
  uri:
    url: "{{ AUTH_URL_ECS }}/servers"
    method: GET
    return_content: yes
    follow_redirects: "{{ uri_follow_redirects }}"
    validate_certs: "{{ uri_validate_certs }}"
    headers:
      Content-Type: "application/json"
      X-Auth-Token: "{{ token['x_subject_token'] }}"
  register: ecs_result
  retries: "{{ uri_retries }}"
  delay: "{{ uri_delay }}"
  until: ecs_result.status == 200
  changed_when: false
  when: ecs_name is defined

- name: Set fact ecs_id for ecs if ecs_name is defined
  set_fact:
    ecs_id: "{{ (ecs_result.content|from_json)|json_query(\"servers[?name=='\" + ecs_name + \"'].id|[0]\") }}"
  when: ecs_name is defined

- name: Send request to API (show ECS)
  uri:
    url: "{{ AUTH_URL_ECS }}/servers/{{ ecs_id }}"
    method: PUT
    body_format: raw
    return_content: yes
    follow_redirects: "{{ uri_follow_redirects }}"
    validate_certs: "{{ uri_validate_certs }}"
    headers:
      Content-Type: "application/json"
      X-Auth-Token: "{{ token['x_subject_token'] }}"
    body: "{{ lookup('template', 'show.json.j2')|to_json }}"
  register: ecs
  retries: "{{ uri_retries }}"
  delay: "{{ uri_delay }}"
  until: ecs.status == 200
  changed_when: false
  when: ecs_id is defined

- name: Set fact ecs_ipaddress for ecs if ecs_id is defined
  set_fact:
    ecs_ipaddress: "{{ ecs.json|json_query('server.addresses.*[*].addr[]|[0]') }}"
  when: ecs_id is defined

- name: Send request to API (create elb_members)
  uri:
    url: "{{ AUTH_URL_ELBv2 }}/lbaas/pools/{{ pool_id }}/members"
    method: POST
    body_format: raw
    return_content: yes
    follow_redirects: "{{ uri_follow_redirects }}"
    status_code: 200,201,202,203,204
    validate_certs: "{{ uri_validate_certs }}"
    headers:
      Content-Type: "application/json"
      X-Auth-Token: "{{ token['x_subject_token'] }}"
    body: "{{ lookup('template', 'membercreatev2.json.j2')|to_json }}"
  register: elbmember
  retries: "{{ uri_retries }}"
  delay: "{{ uri_delay }}"
  until: elbmember.status == 201
  when:
    - pool_id is defined
    - subnet_id is defined

- debug:
    msg: "{{ elbmember.json }}"
